{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome","title":"Welcome","text":"<p>This is Dimensium Docs, the site which hosts all the documentations of our featured projects and softwares. If you want to visit the news/blog site instead of this documentation site, please click this.</p> <p>Our featured repositories:</p> <ul> <li>coding-standard (hosted on this site)</li> <li>dimensium-base (docs available)</li> <li>other repositories which is still inactive, click this to visit our repositories</li> </ul> <p>This site is built using mkdocs with material for mkdocs theme. Documentation for this site is also available for this site. You can find it easily in the navigation bar.</p>"},{"location":"tags/","title":"Tags","text":"<p>These are the relevant tags of the documentations:</p>"},{"location":"coding-standard/","title":"Coding Standard","text":""},{"location":"dimensium-base/","title":"Dimensium Base","text":"<p>Dimensium Base serves as the foundation for all Dimensium projects. It is responsible for providing code infrastructure like a thread safe synchronous logging system, fast reading and writing of world dimension files, and interoperability with RocksDB.</p> <p>These docs contains:</p> <ul> <li>A code walkthrough, which will makes new contributors easier to explore the bunch of code;</li> <li>API reference for contributors who read the code walkthrough.</li> </ul>"},{"location":"dimensium-base/code-walkthrough/","title":"Code walkthrough","text":"<p>The dimensium base library only contains some frequently-typed codes and world/dimensium/chunk/(block/entity/item) data structures.</p> <p>if you type <code>tree</code> you will get such these results (2023/8/10 uncommited changes):</p> <pre><code>.\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 CMakeLists.txt\n    \u251c\u2500\u2500 base\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 base.hpp\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 definitions.hpp\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 exceptions.cpp\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 exceptions.hpp\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 freq_used_exceptions.hpp\n    \u251c\u2500\u2500 precompile.hpp\n    \u251c\u2500\u2500 utility\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 allocation\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 allocator.hpp\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 log\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 log_message.hpp\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 log_stream.cpp\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 log_stream.hpp\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 uuid\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 uuid.cpp\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 uuid.hpp\n    \u2514\u2500\u2500 world\n        \u251c\u2500\u2500 block.hpp\n        \u251c\u2500\u2500 dimension.hpp\n        \u251c\u2500\u2500 item.hpp\n        \u251c\u2500\u2500 namespace_id.hpp\n        \u2514\u2500\u2500 world.hpp\n</code></pre> <p>This doc will introduce these codes, although it's still just-started developing.</p>"},{"location":"dimensium-base/code-walkthrough/#build-system","title":"Build system","text":"<p>We use CMake as build system. CMake is a cross-platform, cross-compiler MAkeFile-generation tool, but not only a generation tool, but also a comprehensive building<sup>1</sup>/testing<sup>2</sup>/packaging<sup>3</sup> toolset.</p> <p>This is the root buildsystem file. (2023/8/10 uncommited changes)</p> <p>/CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.26)\nproject(\n    dimensium_base\n    LANGUAGES\n        C CXX\n)\n\nset(CMAKE_CXX_STANDARD 20) # (1)!\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\n\nadd_subdirectory(src)\n</code></pre></p> <ol> <li>We use C++20 but still keep the \"header-source file\" style, which means we won't use modules in dimensium-base code. But we will use some C++20 library and language feature, such <code>std::jthread</code> we used in <code>class LogStream</code> <sup>4</sup>, <code>concept</code>s we use everywhere in future <sup>5</sup> fully-template-based classes and generic programming libraries <sup>6</sup>.</li> </ol> <p>This file is the root <code>CMakeLists.txt</code> file, and it doesn't contains any building processes, only some general settings.</p> <p>This is the file contains building processes.</p> /src/CMakeLists.txt<pre><code>file(\n    GLOB_RECURSE\n        DIMENSIUM_BASE_SOURCES  # (1)!\n\n    *.c *.cc *.C *.cpp *.cxx \n)\n\n## configuration options\n\nif(${BUILD_SHARED_LIBS})\n    add_library(\n        dimensium_base SHARED\n        ${DIMENSIUM_BASE_SOURCES}\n    )\nelse()\n    add_library(\n        dimensium_base\n        ${DIMENSIUM_BASE_SOURCES}\n    )\nendif()\n\n\ntarget_include_directories(\n    dimensium_base PUBLIC\n        ./\n        ../lib/\n)\n\n# doesn't linked to a library now \n# target_link_libraries(\n#     dimensium_base PUBLIC\n          # libraries which will linked soon \n          # (2)!\n# )\n</code></pre> <ol> <li> <p>This <code>file()</code> invocation will deleted when necessary. Because CMake doesn't know when to regenerate the build system while adding a source without changing the <code>CMakeLists.txt</code>. Here is the official suggestion written in the CMake documentation:</p> <p>Note</p> <p>We do not recommend using <code>GLOB</code> to collect a list of source files from your source tree. If no <code>CMakeLists.txt</code> file changes when a source is added or removed then the generated build system cannot know when to ask CMake to regenerate. The <code>CONFIGURE_DEPENDS</code> flag may not work reliably on all generators, or if a new generator is added in the future that cannot support it, projects using it will be stuck. Even if <code>CONFIGURE_DEPENDS</code> works reliably, there is still a cost to perform the check on every rebuild. </p> </li> <li> <p>We haven't linked RocksDB and other \"linkable\" libraries with dimensium-base, so these lines was commented.</p> </li> </ol> <ol> <li> <p>CMake. It's main page is here.\u00a0\u21a9</p> </li> <li> <p>CTest. It's a tool which makes automatically testing (CI) possible. It's bundled with CMake.\u00a0\u21a9</p> </li> <li> <p>CPack. It's another tool to generate installer (for Windows), packages (<code>deb</code>, <code>rpm</code>, etc.), and other deployments.\u00a0\u21a9</p> </li> <li> <p><code>LogStream</code> is a class, which provides synchroized logging output using some simple member functions. It prints it's own logging message called <code>LogMessage</code> which defined in <code>src/utility/log/log_message.hpp</code> instead of normal <code>std::string</code>, in order to print some debug message, including <code>std::thread::id</code> and log levels defined in <code>LogMessage::Type</code> (a <code>enum class</code>).\u00a0\u21a9</p> </li> <li> <p>Unfortunately, it is just available in future.\u00a0\u21a9</p> </li> <li> <p>We're planning to use the full power of <code>template</code> classes and <code>concept</code>s in our libraries, including dimensium-base, dimensium-core (which is still in design) and more.\u00a0\u21a9</p> </li> </ol>"},{"location":"dimensium-docs/","title":"Dimensium Docs' documentation","text":"<p>This is the documentation of this site. </p> <p>As the homepage said, this page is built using mkdocs with material for mkdocs theme. These docs describes how this site was built and automatically deployed.</p>"},{"location":"dimensium-docs/docs-creation-and-configurations/","title":"Docs creation and configurations","text":"<p>We(I) created this site on my Windows computer using powershell, but commands are similar and usable on any operating system.</p> <pre><code>mkdocs new docs\nSet-Location docs/ # (1)!\ngit init\ngit status\n</code></pre> <ol> <li>In bash, it's <code>cd</code>.</li> </ol> <p>Output should look like this:</p> <pre><code>INFO    -  Writing config file: docs\\mkdocs.yml\nINFO    -  Writing initial docs: docs\\docs\\index.md\nInitialized empty Git repository in YourDrive:/path/to/docs/.git/\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        docs/\n        mkdocs.yml\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre> <p>After created empty repository on Github, type:</p> <pre><code>git add .\ngit commit -m \"Initialized docs\"\nGet-Content mkdocs.yml # (1)!\n</code></pre> <ol> <li>In bash, it's <code>cat</code>.</li> </ol> <p>Output: <pre><code>site_name: My Docs\n</code></pre></p> <p>Configure <code>mkdocs.yml</code> like this:</p> <pre><code># site fundamental configurations.\n\nsite_name: \"Dimensium Docs\"\nsite_description: \"The official documentation repository of Dimensium, using mkdocs with material theme for mkdocs.\"\nsite_author: \"The Dimensium Software Organization\"\nsite_url: \"https://dimensium.github.io\"\nstrict: false\n\n# repository configurations.\nrepo_name: \"dimensium/docs\"\nrepo_url: \"https://github.com/dimensium/docs\"\nedit_uri: \"https://github.com/dimensium/docs/edit/master/docs\"\n\n# copyright.\ncopyright: \"Copyright &amp;copy; 2023 Dimensium Software Organization\"\n\n# favicon: assets/images/dimensium-logo.ico # enable it till we have the icon in .ico format.\n</code></pre> <p>These are fundamental configurations. Use these extensions to enable full power of markdown:</p> <pre><code>markdown_extensions:\n  - attr_list\n  - pymdownx.emoji:\n      emoji_index: !!python/name:materialx.emoji.twemoji\n      emoji_generator: !!python/name:materialx.emoji.to_svg\n  - abbr\n  - admonition\n  - attr_list\n  - def_list\n  - footnotes\n  - md_in_html\n  - toc:\n      permalink: true\n  - tables\n  - pymdownx.arithmatex:\n      generic: true\n  - pymdownx.betterem\n  - pymdownx.caret\n  - pymdownx.mark\n  - pymdownx.tilde\n  - pymdownx.critic\n  - pymdownx.details\n  - pymdownx.highlight:\n      anchor_linenums: true\n  - pymdownx.superfences \n</code></pre> <p>These features:</p> <pre><code>theme:\n  features:\n    - navigation.instant\n    - navigation.tabs\n    - navigation.sections\n    - navigation.indexes\n    - navigation.footer\n\n    - toc.integrate\n\n    - content.action.edit\n    - content.action.view\n\n    - search.suggest\n    - search.highlight\n    - search.share\n</code></pre> <p>These plugins:</p> <pre><code># mkdocs material plugins.\nplugins:\n\n  - search\n\n  - tags:\n      tags_file: tags.md\n\n\n  # revision date plugin, show the date when they edited and created on each page.\n  - git-revision-date-localized:\n      enable_creation_date: true\n</code></pre> <p>We use these theme settings:</p> <pre><code># theme settings.\ntheme:\n  name: material\n  lang: en\n  palette:\n\n    # Palette toggle for light mode\n    - scheme: default\n      primary: white\n      accent: light blue\n      toggle:\n        icon: material/toggle-switch\n        name: Switch to dark mode\n\n    # Palette toggle for dark mode\n    - scheme: slate\n      primary: black\n      accent: light blue\n      toggle:\n        icon: material/toggle-switch-off-outline\n        name: Switch to light mode\n\n  logo: assets/images/dimensium-logo.svg\n\n  icon:\n    repo: fontawesome/brands/github\n    edit: material/pencil-ruler\n    view: material/eye\n</code></pre> <p>Used <code>material/toggle-switch-*</code> as the scheme-changing button, used <code>material/pencil-ruler</code> and <code>material/eye</code> as the button icon for editing and viewing on GitHub. Used <code>fontawesome/brands/github</code> as the git repository icon on the top right.</p>"},{"location":"dimensium-docs/site-automation-using-github-actions/","title":"Site automation using GitHub Actions","text":"<p>We use GitHub Actions to automate the site building and deploying. GitHub Actions uses YAML to configure the automation steps and running ways, and the whole deployment process seemed like this:</p> <ol> <li>You pushed (a) new commit(s) to this repository, using <code>git push -u origin master</code> to your fork and creating a pull request;</li> <li>The action file makes the action started to build the whole site with your new/modified file, and created a push to another branch called <code>gh-pages</code>;</li> <li>The repository settings makes this site deployed from the <code>gh-pages</code> branch, when that action file completed building the site, another action called <code>pages build and deployment</code> automatically runs and deploys the generated site to the target, i.e. <code>https://dimensium.github.io/docs</code>.</li> </ol>"},{"location":"dimensium-docs/site-automation-using-github-actions/#site-building-automation","title":"Site building automation","text":"<p>A workflow written in YAML named <code>page-building.yml</code> is in the <code>.github/workflows/</code> directory.</p> <p>This is the workflow:</p> <p><pre><code>name: Page buildings\non:\n  push:\n    branches:\n      - master\n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV \n\n\n      - uses: actions/cache@v3\n        with:\n          key: mkdocs-material-${{ env.cache_id }}\n          path: .cache\n          restore-keys: |\n            mkdocs-material-\n      - run: pip install mkdocs-material mkdocs-git-revision-date-localized-plugin jieba pillow cairosvg\n\n\n\n      - run: mkdocs gh-deploy --force\n</code></pre></p> <p>It defines a workflow called <code>Page buildings</code>, when there are fresh pushes on main/master repository (the master branch will shortly renamed to \"main\"), this action starts on the latest ubuntu linux, changes the environment variable, install packages we needed, and <code>mkdocs gh-deploy --force</code> deploys the docs to the <code>gh-pages</code> branch.</p>"},{"location":"dimensium-docs/site-automation-using-github-actions/#problems-with-multi-language-selector-and-its-solution","title":"Problems with multi-language selector and it's solution","text":"<p>Although the discussion #2346 provided a solution for multi-language support in one git repository, we choosed to keep it single-language but provided a language switching button which is configurable in <code>mkdocs.yml</code>, to let the multi-language support elegant and flexible.</p> <p>To add your translations, just:</p> <ol> <li> <p>Simply fork this repository, changes the <code>en</code> in setting to your language code <sup>1</sup>, translate the document while lefting un-translated pages in English.</p> </li> <li> <p>Add your link <sup>2</sup> in the config file following the comment provided in config file. </p> </li> </ol> <ol> <li> <p>The language code reference is available in https://squidfunk.github.io/mkdocs-material/setup/changing-the-language/#site-language.\u00a0\u21a9</p> </li> <li> <p>Best deployed in GitHub Pages. It's documentation is available in https://docs.github.com/en/pages.\u00a0\u21a9</p> </li> </ol>"},{"location":"dimensium-docs/writting-docs/","title":"Writting docs","text":"<p>After introducing the basic principles of building this website and implementing automated deployment, writing a document is very easy. This article briefly introduces how to contribute documents.</p> <p>We will not introduce the basic syntax of markdown, but we will briefly introduce pymdown's extension of markdown syntax, and introduce the standard we write markdown documents.</p>"},{"location":"dimensium-docs/writting-docs/#code-blocks","title":"Code blocks","text":"<p>We use backquotes to insert a code block in markdown:</p> <pre><code>Some text\n``` language-you-use\nSome code\n```\nSome text\n</code></pre> <p>But not this:</p> <pre><code>Some text\n\n    Some code\n    Some code\n\nSome text\n</code></pre> <p>This syntax disables syntax highlighting, and makes it more difficult to read the code and adding annotations. If you want to insert ``` in your code block (like this document), just use more backquotes:</p> <pre><code>Some text\n````markdown\nSome markdown code\n```language-you-use\nSome code\n```\n````\n</code></pre>"},{"location":"dimensium-docs/writting-docs/#using-admonitions","title":"Using Admonitions","text":"<p>Use admonitions the Material for MkDocs provided, this will make your output much prettier and focused on the content.</p> <p>Tip</p> <p>Use admonitions properly, or you will get your documentation more confusing.</p> <p>Guide using admonitions see this link in Material for MkDocs documentation.</p>"},{"location":"dimensium-docs/writting-docs/#using-inline-admonitions","title":"Using inline admonitions","text":"<p>Inline admonitions provided a simple way to render admonition without breaking documentation into parts. This function is useful when writing a tutorial or \"cookbook\". When the viewport is too narrow to put the inline admonitions, it will stretch to the full width of the viewport, one case is reading documentation on mobile phones.</p> <p>Lorem ipsum dolor</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"dimensium-docs/writting-docs/#using-annotations","title":"Using annotations","text":"<p>Annotations is one of the best features of the Material for MkDocs I considered. It provided another simple way to make comment-like notes in almost anywhere in markdown document. </p> <p>For it's usage, click this to learn more.</p> <p>Here is a code block which commented by annotations. It is a thread-safe log queue interface written in C++. Notice we also used <code>linenums</code>, <code>title</code> and <code>hl_lines</code> attributes.</p> <p>Result looks like this:</p> log_queue.hpp<pre><code>class LogQueue\n{\n    private:\n        std::queue&lt;std::string, std::list&lt;std::string&gt;&gt; message_queue; // (1)!\n        std::mutex queue_mutex;\n        std::condition_variable queue_cond;\n\n        std::thread internal_thread;\n\n        bool exit_flag {false};\n        std::mutex ef_mutex;\n\n        std::ostream &amp;stream; // (2)!\n\n        void listen(void);\n    public:\n        LogQueue(void) : \n            stream {std::cout},\n            internal_thread {&amp;LogQueue::listen}\n        { }\n\n        LogQueue(LogQueue const&amp;) = delete;\n        LogQueue &amp;operator=(LogQueue const&amp;) = delete;\n\n        virtual ~LogQueue(void);\n\n        void add(std::string);\n        void stop(void); // (3)!\n};\n</code></pre> <ol> <li> <p>The message queue wraps the <code>std::list</code>, which may increase the performance.</p> </li> <li> <p>Notice that <code>stream</code> should always initialized in ctor-initializer list. Don't place this in scope, that occurs compile error.</p> </li> <li> <p>This function uses the <code>ef_mutex</code>, which protects the <code>exit_flag</code> variable, <code>internal_thread</code> checks the flag, when it was set, loop in thread exits.</p> </li> </ol> <p>The raw code looks like this:</p> <pre><code>```cpp title=\"log_queue.hpp\" linenums=\"1\" hl_lines=\"27-28\"\nclass LogQueue\n{\n    private:\n        std::queue&lt;std::string, std::list&lt;std::string&gt;&gt; message_queue; // (1)!\n        std::mutex queue_mutex;\n        std::condition_variable queue_cond;\n\n        std::thread internal_thread;\n\n        bool exit_flag {false};\n        std::mutex ef_mutex;\n\n        std::ostream &amp;stream; // (2)!\n\n        void listen(void);\n    public:\n        LogQueue(void) : \n            stream {std::cout},\n            internal_thread {&amp;LogQueue::listen}\n        { }\n\n        LogQueue(LogQueue const&amp;) = delete;\n        LogQueue &amp;operator=(LogQueue const&amp;) = delete;\n\n        virtual ~LogQueue(void);\n\n        void add(std::string);\n        void stop(void); // (3)!\n};\n```\n\n1. The message queue wraps the `std::list`, which may increase the performance.\n\n2. Notice that `stream` should always initialized in ctor-initializer list. Don't place this in scope, that occurs compile error.\n\n3. This function uses the `ef_mutex`, which protects the `exit_flag` variable, `internal_thread` checks the flag, when it was set, loop in thread exits.\n</code></pre>"},{"location":"tags/","title":"Tags","text":"<p>These are the relevant tags of the documentations:</p>"}]}